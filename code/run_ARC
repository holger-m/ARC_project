#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""created 16.03.2021
@author: holger mohr
"""

import argparse
import json
import numpy as np

def f_0a938d79(input_npa):
    
    first_row = input_npa[0]    
    transpose_flag = False
    
    if np.sum(first_row) == 0:
        input_npa = input_npa.transpose()
        transpose_flag = True
        first_row = input_npa[0]
    
    last_row = input_npa[-1]
    max_first_last = np.maximum(first_row, last_row)
    
    nz_ind = np.nonzero(max_first_last)
    nz_ind_1 = nz_ind[0][0]
    nz_ind_2 = nz_ind[0][1]
    nz_diff = nz_ind_2 - nz_ind_1
    color_1 = max_first_last[nz_ind_1]
    color_2 = max_first_last[nz_ind_2]
    
    output_npa = np.zeros(input_npa.shape, dtype=int)
    
    fill_count = 0
    while nz_ind_1 + fill_count*2*nz_diff < input_npa.shape[1]:
        for i in range(input_npa.shape[0]):
            output_npa[i][nz_ind_1 + fill_count*2*nz_diff] = color_1
        fill_count += 1
    
    fill_count = 0
    while nz_ind_2 + fill_count*2*nz_diff < input_npa.shape[1]:
        for i in range(input_npa.shape[0]):
            output_npa[i][nz_ind_2 + fill_count*2*nz_diff] = color_2
        fill_count += 1
    
    if transpose_flag:
        output_npa = output_npa.transpose()

    return output_npa

def f_0b148d64(input_npa):
    
    color_sum = np.zeros(10, dtype=int)
    for i in range(10):
        color_sum[i] = np.sum(input_npa == i)
    color_sum[0] = 0
    max_ind = np.argmax(color_sum)
    color_sum[max_ind] = 0
    color_out_ind = np.argmax(color_sum)
    
    output_npa = np.zeros(input_npa.shape, dtype=int)
    for i in range(input_npa.shape[0]):
        for j in range(input_npa.shape[1]):
            if input_npa[i][j] == color_out_ind:
                output_npa[i][j] = color_out_ind
    
    delete_rows_bool = np.zeros(input_npa.shape[0], dtype=bool)
    for i in range(input_npa.shape[0]):
        if np.sum(output_npa[i]) == 0:
            delete_rows_bool[i] = True
    output_npa = np.delete(output_npa, delete_rows_bool, axis=0)
    
    delete_cols_bool = np.zeros(input_npa.shape[1], dtype=bool)
    for j in range(input_npa.shape[1]):
        if np.sum(output_npa[:,j]) == 0:
            delete_cols_bool[j] = True
    output_npa = np.delete(output_npa, delete_cols_bool, axis=1)
    
    return output_npa

def f_0ca9ddb6(input_npa):
    
    output_npa = input_npa
    
    for i in range(input_npa.shape[0]):
        for j in range(input_npa.shape[1]):
            if input_npa[i,j] == 2:
                output_npa[i-1,j-1] = 4
                output_npa[i-1,j+1] = 4
                output_npa[i+1,j-1] = 4
                output_npa[i+1,j+1] = 4
    
    for i in range(input_npa.shape[0]):
        for j in range(input_npa.shape[1]):
            if input_npa[i,j] == 1:
                output_npa[i-1,j] = 7
                output_npa[i+1,j] = 7
                output_npa[i,j-1] = 7
                output_npa[i,j+1] = 7
    
    return output_npa

def f_0d3d703e(input_npa):
    
    output_npa = np.zeros(input_npa.shape, dtype=int)
    
    for i in range(input_npa.shape[0]):
        for j in range(input_npa.shape[1]):
            if input_npa[i,j] == 0:
                output_npa[i,j] = 0
            elif input_npa[i,j] == 1:
                output_npa[i,j] = 5
            elif input_npa[i,j] == 2:
                output_npa[i,j] = 6
            elif input_npa[i,j] == 3:
                output_npa[i,j] = 4
            elif input_npa[i,j] == 4:
                output_npa[i,j] = 3
            elif input_npa[i,j] == 5:
                output_npa[i,j] = 1
            elif input_npa[i,j] == 6:
                output_npa[i,j] = 2
            elif input_npa[i,j] == 7:
                output_npa[i,j] = 7
            elif input_npa[i,j] == 8:
                output_npa[i,j] = 9
            elif input_npa[i,j] == 9:
                output_npa[i,j] = 8
    
    return output_npa

def f_00d62c1b(input_npa):
    
    output_npa = input_npa
    
    for i in range(output_npa.shape[0]):
        for j in range(output_npa.shape[1]):
            if output_npa[i,j] == 0:
                if i == 0 or i == output_npa.shape[0] - 1 or j == 0 or j == output_npa.shape[1] - 1:
                    output_npa[i,j] = 1
    
    for rep_ind in range(30):
        for i in range(output_npa.shape[0]):
            for j in range(output_npa.shape[1]):
                if output_npa[i,j] == 0:
                    if output_npa[i-1,j] == 1 or output_npa[i+1,j] == 1 or output_npa[i,j-1] == 1 or output_npa[i,j+1] == 1:
                        output_npa[i,j] = 1
    
    for i in range(output_npa.shape[0]):
        for j in range(output_npa.shape[1]):
            if output_npa[i,j] == 0:
                output_npa[i,j] = 4
    
    for i in range(output_npa.shape[0]):
        for j in range(output_npa.shape[1]):
            if output_npa[i,j] == 1:
                output_npa[i,j] = 0
    
    return output_npa

def f_0dfd9992(input_npa):
    
    output_npa = input_npa
    
    all_filled_flag = False
    
    while not all_filled_flag:
        
        break_flag = False
        for i in range(output_npa.shape[0]):
            for j in range(output_npa.shape[1]):
                if output_npa[i,j] == 0:
                    i_start = i
                    j_start = j
                    break_flag = True
                    break
            if break_flag:
                break
        
        i_curr = i_start - 1
        j_curr = j_start
        state_curr = 0   # 0: right; 1: down; 2: left; 3: up
        
        envelope_list_relative = list()
        envelope_list_absolute = list()
        
        envelope_list_relative.append([i_curr - (i_start - 1), j_curr - j_start, output_npa[i_curr, j_curr]])
        envelope_list_absolute.append([i_curr, j_curr, output_npa[i_curr, j_curr]])
        
        continue_envelope_flag = True
        
        while continue_envelope_flag:
            
            if state_curr == 0:
                if output_npa[i_curr + 1, j_curr] == 0 and output_npa[i_curr + 1, j_curr + 1] == 0:
                    j_curr += 1
                elif output_npa[i_curr + 1, j_curr] == 0 and output_npa[i_curr + 1, j_curr + 1] > 0:
                    state_curr = 1
                    i_curr += 1
                    j_curr += 1
            elif state_curr == 1:
                if output_npa[i_curr, j_curr - 1] == 0 and output_npa[i_curr + 1, j_curr - 1] == 0:
                    i_curr += 1
                elif output_npa[i_curr, j_curr - 1] == 0 and output_npa[i_curr + 1, j_curr - 1] > 0:
                    state_curr = 2
                    i_curr += 1
                    j_curr -= 1
            elif state_curr == 2:
                if output_npa[i_curr - 1, j_curr] == 0 and output_npa[i_curr - 1, j_curr - 1] == 0:
                    j_curr -= 1
                elif output_npa[i_curr - 1, j_curr] == 0 and output_npa[i_curr - 1, j_curr - 1] > 0:
                    state_curr = 3
                    i_curr -= 1
                    j_curr -= 1
            elif state_curr == 3:
                if output_npa[i_curr, j_curr + 1] == 0 and output_npa[i_curr - 1, j_curr + 1] == 0:
                    i_curr -= 1
                elif output_npa[i_curr, j_curr + 1] == 0 and output_npa[i_curr - 1, j_curr + 1] > 0:
                    state_curr = 0
                    i_curr -= 1
                    j_curr += 1
            
            if i_curr == envelope_list_absolute[0][0] and j_curr == envelope_list_absolute[0][1]:
                continue_envelope_flag = False
            else:
                if i_curr >= 0 and j_curr >= 0 and i_curr < output_npa.shape[0] and j_curr < output_npa.shape[1]:
                    envelope_list_relative.append([i_curr - (i_start - 1), j_curr - j_start, output_npa[i_curr, j_curr]])
                    envelope_list_absolute.append([i_curr, j_curr, output_npa[i_curr, j_curr]])
        
        print(envelope_list_relative)
        print(envelope_list_absolute)
        
        all_filled_flag = True
    
    return output_npa

def task_selector(task_name, input_npa):
    
    if task_name == '0a938d79':
        output_npa = f_0a938d79(input_npa)
    elif task_name == '0b148d64':
        output_npa = f_0b148d64(input_npa)
    elif task_name == '0ca9ddb6':
        output_npa = f_0ca9ddb6(input_npa)
    elif task_name == '0d3d703e':
        output_npa = f_0d3d703e(input_npa)
    elif task_name == '00d62c1b':
        output_npa = f_00d62c1b(input_npa)
    elif task_name == '0dfd9992':
        output_npa = f_0dfd9992(input_npa)
    else:
        raise Exception('Task solver not found!')
    
    return output_npa

def main():
    
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--task_name', help='task name', type=str, required=True)
    args = parser.parse_args()
        
    with open(('/home/mohr/ARC_project/dependencies/ARC/data/training/' + args.task_name + '.json')) as f:
        task_dict = json.load(f)
    
    train_list = task_dict['train']
    for i in range(len(train_list)):
        curr_pair_dict = train_list[i]
        curr_input_npa = np.asarray(curr_pair_dict['input'])
        curr_output_npa = np.asarray(curr_pair_dict['output'])
        f_output_npa = task_selector(args.task_name, curr_input_npa)
        if curr_output_npa.shape == f_output_npa.shape:
            print('train ' + str(i) + ': ' + str(np.array_equal(curr_output_npa, f_output_npa)))
        else:
            print('train ' + str(i) + ': wrong shape')
    
    test_list = task_dict['test']
    for i in range(len(test_list)):
        curr_pair_dict = test_list[i]
        curr_input_npa = np.asarray(curr_pair_dict['input'])
        curr_output_npa = np.asarray(curr_pair_dict['output'])
        f_output_npa = task_selector(args.task_name, curr_input_npa)
        if curr_output_npa.shape == f_output_npa.shape:
            print('test ' + str(i) + ': ' + str(np.array_equal(curr_output_npa, f_output_npa)))
        else:
            print('test ' + str(i) + ': wrong shape')

if __name__ == '__main__':
    main()
